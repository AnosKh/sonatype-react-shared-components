/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */
import React, { ReactElement } from 'react';
import { ShallowWrapper } from 'enzyme';

import { getShallowComponent } from '../../../__testutils__/enzymeUtils';
import AdvisoriesDetail, { Props } from '../details/AdvisoriesDetail';
import DetailLink from '../details/DetailLink';

function assertLink(divWrapper: ShallowWrapper, expectedLabel: string, expectedLink: ReactElement) {
  expect(divWrapper).toHaveClassName('nx-truncate-ellipsis');
  expect(divWrapper.children().length).toBe(2);
  expect(divWrapper.children().at(0)).toHaveDisplayName('dt');
  expect(divWrapper.children().at(0)).toHaveText(expectedLabel);
  expect(divWrapper.children().at(1)).toHaveDisplayName('dd');
  expect(divWrapper.children().at(1)).toContainReact(expectedLink);
}

function assertLinkWithoutLabel(listElement: ShallowWrapper, expectedLink: ReactElement) {
  expect(listElement).toHaveClassName('nx-truncate-ellipsis');
  expect(listElement).toContainReact(expectedLink);
}

describe('AdvisoriesDetail', function() {
  const simpleProps: Props = {};
  const getShallow = getShallowComponent<Props>(AdvisoriesDetail, simpleProps);

  it('renders nothing if advisories prop is not provided', function() {
    expect(getShallow()).toBeEmptyRender();
  });

  it('renders nothing if advisories is empty', function() {
    const shallowRender = getShallow({
      advisories: []
    });
    expect(shallowRender).toBeEmptyRender();
  });

  it('renders nothing if advisories missing data', function() {
    const shallowRender = getShallow({
      advisories: [
        {
          referenceType: 'ATTACK'
        },
        {
          referenceType: null,
          url: 'null-url'
        }
      ]
    });
    expect(shallowRender).toBeEmptyRender();
  });

  it('renders nothing if advisories all have UNKNOWN source, and no URL', function () {
    const shallowRender = getShallow({advisories: [{referenceType: 'UNKNOWN'}]});
    expect(shallowRender).toBeEmptyRender();
  });

  it('properly renders advisory link', function () {
    const shallowRender = getShallow({
      advisories: [{
        referenceType: 'ATTACK',
        url: 'attack-url'
      }]
    });

    expect(shallowRender).toContainExactlyOneMatchingElement('RenderDetail');
    expect(shallowRender.children().length).toBe(1);

    const dlElement = shallowRender.find('dl');
    expect(dlElement.length).toBe(1);

    const divElement = dlElement.find('div');
    expect(divElement.length).toBe(1);
    assertLink(divElement, 'Attack:', <DetailLink href="attack-url">attack-url</DetailLink>);
  });

  it('renders multiple links', function () {
    const shallowRender = getShallow({
      advisories: [
        {
          referenceType: 'ATTACK',
          url: 'attack-url'
        },
        {
          referenceType: 'PROJECT',
          url: 'project-url'
        },
        {
          referenceType: 'UNKNOWN',
          url: 'unknown-url'
        }
      ]
    });

    const divElement = shallowRender.find('div');
    expect(divElement.length).toBe(3);
    assertLink(divElement.at(0), 'Attack:', <DetailLink href="attack-url">attack-url</DetailLink>);
    assertLink(divElement.at(1), 'Project:', <DetailLink href="project-url">project-url</DetailLink>);
    assertLink(divElement.at(2), 'Unknown:', <DetailLink href="unknown-url">unknown-url</DetailLink>);
  });

  it('omits ReferenceLinks with missing data', function () {
    const shallowRender = getShallow({
      advisories: [
        {
          referenceType: 'ATTACK'
        },
        {
          referenceType: 'EVIDENCE',
          url: 'evidence-url'
        },
        {
          referenceType: null,
          url: 'null-url'
        },
        {
          referenceType: 'THIRD_PARTY',
          url: 'third_party-url'
        }
      ]
    });

    const divElement = shallowRender.find('div');
    expect(divElement.length).toBe(2);
    assertLink(divElement.at(0), 'Evidence:', <DetailLink href="evidence-url">evidence-url</DetailLink>);
    assertLink(divElement.at(1), 'Third Party:', <DetailLink href="third_party-url">third_party-url</DetailLink>);
  });

  it('renders links without reference type labels if all types are UNKNOWN', function () {
    const shallowRender = getShallow({
      advisories: [
        {
          referenceType: 'UNKNOWN',
          url: 'first-url'
        },
        {
          referenceType: 'UNKNOWN',
          url: 'second-url'
        },
        {
          referenceType: 'UNKNOWN',
          url: 'third-url'
        }
      ]
    });

    expect(shallowRender.find('ul')).toHaveClassName('nx-list--unstyled');

    const element = shallowRender.find('li');
    expect(element.length).toBe(3);
    assertLinkWithoutLabel(element.at(0), <DetailLink href="first-url">first-url</DetailLink>);
    assertLinkWithoutLabel(element.at(1), <DetailLink href="second-url">second-url</DetailLink>);
    assertLinkWithoutLabel(element.at(2), <DetailLink href="third-url">third-url</DetailLink>);
  });

});
