/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */
import React from 'react';

import {getShallowComponent} from '../../../__testutils__/enzymeUtils';
import CVSSDetail, {Props} from '../details/CVSSDetail';
import SeverityScoreDisplay from '../details/SeverityScoreDisplay';
import {SeverityScore} from '../types';

describe('CVSSDetail', function () {
  const simpleProps: Props = {};
  const getShallow = getShallowComponent<Props>(CVSSDetail, simpleProps);

  it('renders nothing if cvssDetail prop is not provided', function () {
    expect(getShallow()).toBeEmptyRender();
  });

  it('renders nothing if both cvss source and vector are absent', function () {
    const shallowRender = getShallow({
      severity: {
        score: 7.3
      }
    });
    expect(shallowRender).toBeEmptyRender();
  });

  it('renders severityScore and vector', function () {
    const severityScore: SeverityScore = {
      source: 'cve_cvss_2',
      score: 7.3,
      vector: 'AV:N/AC:L/Au:N/C:P/I:P/A:P'
    };

    const shallowRender = getShallow({severity: severityScore});

    expect(shallowRender).toContainExactlyOneMatchingElement('RenderDetail');
    expect(shallowRender.find('RenderDetail')).toHaveProp('title', 'CVSS Details');

    const dlElement = shallowRender.find('dl');
    expect(dlElement).toHaveDisplayName('dl');
    expect(dlElement.children().length).toBe(2);
    expect(dlElement.childAt(0)).toContainReact(<SeverityScoreDisplay severityScore={severityScore}/>);

    const vectorDiv = dlElement.childAt(1);
    expect(vectorDiv).toHaveDisplayName('div');
    expect(vectorDiv.children().length).toBe(2);
    expect(vectorDiv.childAt(0)).toHaveDisplayName('dt');
    expect(vectorDiv.childAt(0)).toHaveText('CVSS Vector:');
    expect(vectorDiv.childAt(1)).toHaveDisplayName('dd');
    expect(vectorDiv.childAt(1)).toHaveText('AV:N/AC:L/Au:N/C:P/I:P/A:P');
  });

  it('omits vector if not provided', function () {
    const severityScore: SeverityScore = {
      source: 'cve_cvss_2',
      score: 7.3
    };

    const shallowRender = getShallow({severity: severityScore});

    const dlElement = shallowRender.find('dl');
    expect(dlElement).toHaveDisplayName('dl');
    expect(dlElement.children().length).toBe(1);
    expect(dlElement.childAt(0)).toContainReact(<SeverityScoreDisplay severityScore={severityScore}/>);
  });

  it('omits severity score if source is not provided', function () {
    const severityScore: SeverityScore = {
      score: 7.3,
      vector: 'AV:N/AC:L/Au:N/C:P/I:P/A:P'
    };

    const shallowRender = getShallow({severity: severityScore});

    const dlElement = shallowRender.find('dl');
    expect(dlElement.children().length).toBe(1);

    const vectorDiv = dlElement.childAt(0);
    expect(vectorDiv.children().length).toBe(2);
    expect(vectorDiv.childAt(0)).toHaveText('CVSS Vector:');
    expect(vectorDiv.childAt(1)).toHaveText('AV:N/AC:L/Au:N/C:P/I:P/A:P');
  });
});
