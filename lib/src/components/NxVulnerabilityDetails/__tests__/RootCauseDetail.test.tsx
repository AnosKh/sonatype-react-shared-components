/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */
import React from 'react';
import {ShallowWrapper} from 'enzyme';

import { getShallowComponent } from '../../../__testutils__/enzymeUtils';
import RootCauseDetail, { Props } from '../details/RootCauseDetail';
import RenderDetail from '../details/RenderDetail';
import {RootCause} from '../types';

function assertRootCause(divWrapper: ShallowWrapper, {listOfPaths, versionRange}: RootCause) {
  const paths = divWrapper.find('span.nx-vulnerability-details__root-cause-path').children();
  expect(paths.length).toBe(listOfPaths.length);
  paths.forEach((path, i) => expect(path).toHaveText(listOfPaths[i]));

  expect(divWrapper.find('span').last()).toHaveClassName('nx-vulnerability-details__root-cause-version-range');
  expect(divWrapper.find('span').last()).toHaveText(versionRange);
}

describe('RootCauseDetail', function() {
  const simpleProps: Props = {};
  const getShallow = getShallowComponent<Props>(RootCauseDetail, simpleProps);

  it('renders nothing if rootCauses prop is not provided', function() {
    expect(getShallow()).toBeEmptyRender();
  });

  it('renders empty <RenderDetail> if rootCauses is empty', function() {
    const shallowRender = getShallow({
      rootCauses: []
    });
    expect(shallowRender).toContainReact(<RenderDetail title="Root Cause" />);
  });

  it('properly renders provided rootCauses', function () {
    const rootCauses = [
      {
        listOfPaths: [
          'splout-hadoop-0.2.4-hadoop.jar',
          'jetty-6.1.15.jar',
          'org/mortbay/jetty/handler/ResourceHandler.class'
        ],
        versionRange: '[6.1.1, 6.1.17)'
      },
      {
        listOfPaths: ['org/mortbay/jetty/HttpConnection.class'],
        versionRange: '[6.1.1, 6.1.17)'
      }
    ];

    const shallowRender = getShallow({
      rootCauses
    });

    expect(shallowRender).toContainExactlyOneMatchingElement('RenderDetail');
    expect(shallowRender.children().length).toBe(2);
    assertRootCause(shallowRender.childAt(0), rootCauses[0]);
    assertRootCause(shallowRender.childAt(1), rootCauses[1]);
  });
});
