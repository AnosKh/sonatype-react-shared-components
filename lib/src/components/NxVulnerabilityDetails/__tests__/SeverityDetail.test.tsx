/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */
import React from 'react';

import { getShallowComponent } from '../../../__testutils__/enzymeUtils';
import SeverityDetail, {Props} from '../details/SeverityDetail';
import SeverityScoreDisplay from '../details/SeverityScoreDisplay';
import {SeverityScore} from '../types';

describe('SeverityDetail', function() {
  const simpleProps: Props = {};
  const getShallow = getShallowComponent<Props>(SeverityDetail, simpleProps);

  it('renders nothing if severityScores prop is not provided', function () {
    expect(getShallow()).toBeEmptyRender();
  });

  it('renders nothing if severityScores is empty and no main severity is provided', function () {
    const shallowRender = getShallow({
      severityScores: [],
      mainSeverity: null
    });
    expect(shallowRender).toBeEmptyRender();
  });

  it('renders nothing if mainSeverity is null and no severityScores are provided', function () {
    const shallowRender = getShallow({
      mainSeverity: null,
      severityScores: null
    });
    expect(shallowRender).toBeEmptyRender();
  });

  it('renders severityScores from its mainSeverity prop', function () {
    const mainSeverity: SeverityScore = {
      source: 'cve_cvss_2',
      score: 7.5
    };

    const shallowRender = getShallow({
      mainSeverity
    });

    expect(shallowRender.find('RenderDetail')).toHaveProp('title', 'Severity');
    const dlElement = shallowRender.find('dl');
    expect(dlElement.children().length).toBe(1);
    expect(dlElement.childAt(0)).toContainReact(<SeverityScoreDisplay severityScore={mainSeverity}/>);
  });

  it('renders severityScores from the severityScores prop', function () {
    const severityScores: SeverityScore[] = [
      {
        source: 'cve_cvss_3',
        score: 7.6
      },
      {
        source: 'sonatype_cvss_2',
        score: 7.7
      },
      {
        source: 'sonatype_cvss_3',
        score: 7.8
      }
    ];

    const shallowRender = getShallow({
      severityScores
    });

    expect(shallowRender.find('RenderDetail')).toHaveProp('title', 'Severity');
    const dlElement = shallowRender.find('dl');
    expect(dlElement.children().length).toBe(3);
    expect(dlElement.childAt(0)).toContainReact(<SeverityScoreDisplay severityScore={severityScores[0]}/>);
    expect(dlElement.childAt(1)).toContainReact(<SeverityScoreDisplay severityScore={severityScores[1]}/>);
    expect(dlElement.childAt(2)).toContainReact(<SeverityScoreDisplay severityScore={severityScores[2]}/>);
  });

  it('renders multiple severityScores', function () {
    const mainSeverity: SeverityScore = {
      source: 'cve_cvss_2',
      score: 7.5
    };

    const severityScores: SeverityScore[] = [
      {
        source: 'cve_cvss_3',
        score: 7.6
      },
      {
        source: 'sonatype_cvss_2',
        score: 7.7
      },
      {
        source: 'sonatype_cvss_3',
        score: 7.8
      }
    ];

    const shallowRender = getShallow({
      mainSeverity,
      severityScores
    });

    expect(shallowRender.find('RenderDetail')).toHaveProp('title', 'Severity');
    const dlElement = shallowRender.find('dl');
    expect(dlElement.children().length).toBe(4);
    expect(dlElement.childAt(0)).toContainReact(<SeverityScoreDisplay severityScore={mainSeverity}/>);
    expect(dlElement.childAt(1)).toContainReact(<SeverityScoreDisplay severityScore={severityScores[0]}/>);
    expect(dlElement.childAt(2)).toContainReact(<SeverityScoreDisplay severityScore={severityScores[1]}/>);
    expect(dlElement.childAt(3)).toContainReact(<SeverityScoreDisplay severityScore={severityScores[2]}/>);
  });
});
